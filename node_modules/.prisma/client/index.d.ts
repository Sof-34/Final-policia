
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Denuncia
 * 
 */
export type Denuncia = $Result.DefaultSelection<Prisma.$DenunciaPayload>
/**
 * Model Denunseguimipolicia
 * 
 */
export type Denunseguimipolicia = $Result.DefaultSelection<Prisma.$DenunseguimipoliciaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Denuncias
 * const denuncias = await prisma.denuncia.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Denuncias
   * const denuncias = await prisma.denuncia.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.denuncia`: Exposes CRUD operations for the **Denuncia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Denuncias
    * const denuncias = await prisma.denuncia.findMany()
    * ```
    */
  get denuncia(): Prisma.DenunciaDelegate<ExtArgs>;

  /**
   * `prisma.denunseguimipolicia`: Exposes CRUD operations for the **Denunseguimipolicia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Denunseguimipolicias
    * const denunseguimipolicias = await prisma.denunseguimipolicia.findMany()
    * ```
    */
  get denunseguimipolicia(): Prisma.DenunseguimipoliciaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.14.0
   * Query Engine version: e9771e62de70f79a5e1c604a2d7c8e2a0a874b48
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Denuncia: 'Denuncia',
    Denunseguimipolicia: 'Denunseguimipolicia'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'denuncia' | 'denunseguimipolicia'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Denuncia: {
        payload: Prisma.$DenunciaPayload<ExtArgs>
        fields: Prisma.DenunciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DenunciaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DenunciaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          findFirst: {
            args: Prisma.DenunciaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DenunciaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          findMany: {
            args: Prisma.DenunciaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>[]
          }
          create: {
            args: Prisma.DenunciaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          createMany: {
            args: Prisma.DenunciaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DenunciaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          update: {
            args: Prisma.DenunciaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          deleteMany: {
            args: Prisma.DenunciaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DenunciaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DenunciaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunciaPayload>
          }
          aggregate: {
            args: Prisma.DenunciaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDenuncia>
          }
          groupBy: {
            args: Prisma.DenunciaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DenunciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DenunciaCountArgs<ExtArgs>,
            result: $Utils.Optional<DenunciaCountAggregateOutputType> | number
          }
        }
      }
      Denunseguimipolicia: {
        payload: Prisma.$DenunseguimipoliciaPayload<ExtArgs>
        fields: Prisma.DenunseguimipoliciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DenunseguimipoliciaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DenunseguimipoliciaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload>
          }
          findFirst: {
            args: Prisma.DenunseguimipoliciaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DenunseguimipoliciaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload>
          }
          findMany: {
            args: Prisma.DenunseguimipoliciaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload>[]
          }
          create: {
            args: Prisma.DenunseguimipoliciaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload>
          }
          createMany: {
            args: Prisma.DenunseguimipoliciaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DenunseguimipoliciaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload>
          }
          update: {
            args: Prisma.DenunseguimipoliciaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload>
          }
          deleteMany: {
            args: Prisma.DenunseguimipoliciaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DenunseguimipoliciaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DenunseguimipoliciaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DenunseguimipoliciaPayload>
          }
          aggregate: {
            args: Prisma.DenunseguimipoliciaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDenunseguimipolicia>
          }
          groupBy: {
            args: Prisma.DenunseguimipoliciaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DenunseguimipoliciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DenunseguimipoliciaCountArgs<ExtArgs>,
            result: $Utils.Optional<DenunseguimipoliciaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DenunciaCountOutputType
   */

  export type DenunciaCountOutputType = {
    seguimientos: number
  }

  export type DenunciaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seguimientos?: boolean | DenunciaCountOutputTypeCountSeguimientosArgs
  }

  // Custom InputTypes
  /**
   * DenunciaCountOutputType without action
   */
  export type DenunciaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DenunciaCountOutputType
     */
    select?: DenunciaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DenunciaCountOutputType without action
   */
  export type DenunciaCountOutputTypeCountSeguimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DenunseguimipoliciaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Denuncia
   */

  export type AggregateDenuncia = {
    _count: DenunciaCountAggregateOutputType | null
    _avg: DenunciaAvgAggregateOutputType | null
    _sum: DenunciaSumAggregateOutputType | null
    _min: DenunciaMinAggregateOutputType | null
    _max: DenunciaMaxAggregateOutputType | null
  }

  export type DenunciaAvgAggregateOutputType = {
    iddenuncias: number | null
  }

  export type DenunciaSumAggregateOutputType = {
    iddenuncias: number | null
  }

  export type DenunciaMinAggregateOutputType = {
    iddenuncias: number | null
    tipo: string | null
    nombre: string | null
    email: string | null
    telefono: string | null
    genero: string | null
    descripcion: string | null
  }

  export type DenunciaMaxAggregateOutputType = {
    iddenuncias: number | null
    tipo: string | null
    nombre: string | null
    email: string | null
    telefono: string | null
    genero: string | null
    descripcion: string | null
  }

  export type DenunciaCountAggregateOutputType = {
    iddenuncias: number
    tipo: number
    nombre: number
    email: number
    telefono: number
    genero: number
    descripcion: number
    _all: number
  }


  export type DenunciaAvgAggregateInputType = {
    iddenuncias?: true
  }

  export type DenunciaSumAggregateInputType = {
    iddenuncias?: true
  }

  export type DenunciaMinAggregateInputType = {
    iddenuncias?: true
    tipo?: true
    nombre?: true
    email?: true
    telefono?: true
    genero?: true
    descripcion?: true
  }

  export type DenunciaMaxAggregateInputType = {
    iddenuncias?: true
    tipo?: true
    nombre?: true
    email?: true
    telefono?: true
    genero?: true
    descripcion?: true
  }

  export type DenunciaCountAggregateInputType = {
    iddenuncias?: true
    tipo?: true
    nombre?: true
    email?: true
    telefono?: true
    genero?: true
    descripcion?: true
    _all?: true
  }

  export type DenunciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Denuncia to aggregate.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Denuncias
    **/
    _count?: true | DenunciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DenunciaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DenunciaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DenunciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DenunciaMaxAggregateInputType
  }

  export type GetDenunciaAggregateType<T extends DenunciaAggregateArgs> = {
        [P in keyof T & keyof AggregateDenuncia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDenuncia[P]>
      : GetScalarType<T[P], AggregateDenuncia[P]>
  }




  export type DenunciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DenunciaWhereInput
    orderBy?: DenunciaOrderByWithAggregationInput | DenunciaOrderByWithAggregationInput[]
    by: DenunciaScalarFieldEnum[] | DenunciaScalarFieldEnum
    having?: DenunciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DenunciaCountAggregateInputType | true
    _avg?: DenunciaAvgAggregateInputType
    _sum?: DenunciaSumAggregateInputType
    _min?: DenunciaMinAggregateInputType
    _max?: DenunciaMaxAggregateInputType
  }

  export type DenunciaGroupByOutputType = {
    iddenuncias: number
    tipo: string
    nombre: string
    email: string
    telefono: string
    genero: string
    descripcion: string
    _count: DenunciaCountAggregateOutputType | null
    _avg: DenunciaAvgAggregateOutputType | null
    _sum: DenunciaSumAggregateOutputType | null
    _min: DenunciaMinAggregateOutputType | null
    _max: DenunciaMaxAggregateOutputType | null
  }

  type GetDenunciaGroupByPayload<T extends DenunciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DenunciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DenunciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DenunciaGroupByOutputType[P]>
            : GetScalarType<T[P], DenunciaGroupByOutputType[P]>
        }
      >
    >


  export type DenunciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    iddenuncias?: boolean
    tipo?: boolean
    nombre?: boolean
    email?: boolean
    telefono?: boolean
    genero?: boolean
    descripcion?: boolean
    seguimientos?: boolean | Denuncia$seguimientosArgs<ExtArgs>
    _count?: boolean | DenunciaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["denuncia"]>

  export type DenunciaSelectScalar = {
    iddenuncias?: boolean
    tipo?: boolean
    nombre?: boolean
    email?: boolean
    telefono?: boolean
    genero?: boolean
    descripcion?: boolean
  }


  export type DenunciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    seguimientos?: boolean | Denuncia$seguimientosArgs<ExtArgs>
    _count?: boolean | DenunciaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $DenunciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Denuncia"
    objects: {
      seguimientos: Prisma.$DenunseguimipoliciaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      iddenuncias: number
      tipo: string
      nombre: string
      email: string
      telefono: string
      genero: string
      descripcion: string
    }, ExtArgs["result"]["denuncia"]>
    composites: {}
  }


  type DenunciaGetPayload<S extends boolean | null | undefined | DenunciaDefaultArgs> = $Result.GetResult<Prisma.$DenunciaPayload, S>

  type DenunciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DenunciaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DenunciaCountAggregateInputType | true
    }

  export interface DenunciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Denuncia'], meta: { name: 'Denuncia' } }
    /**
     * Find zero or one Denuncia that matches the filter.
     * @param {DenunciaFindUniqueArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DenunciaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaFindUniqueArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Denuncia that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DenunciaFindUniqueOrThrowArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DenunciaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Denuncia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindFirstArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DenunciaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaFindFirstArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Denuncia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindFirstOrThrowArgs} args - Arguments to find a Denuncia
     * @example
     * // Get one Denuncia
     * const denuncia = await prisma.denuncia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DenunciaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Denuncias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Denuncias
     * const denuncias = await prisma.denuncia.findMany()
     * 
     * // Get first 10 Denuncias
     * const denuncias = await prisma.denuncia.findMany({ take: 10 })
     * 
     * // Only select the `iddenuncias`
     * const denunciaWithIddenunciasOnly = await prisma.denuncia.findMany({ select: { iddenuncias: true } })
     * 
    **/
    findMany<T extends DenunciaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Denuncia.
     * @param {DenunciaCreateArgs} args - Arguments to create a Denuncia.
     * @example
     * // Create one Denuncia
     * const Denuncia = await prisma.denuncia.create({
     *   data: {
     *     // ... data to create a Denuncia
     *   }
     * })
     * 
    **/
    create<T extends DenunciaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaCreateArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Denuncias.
     * @param {DenunciaCreateManyArgs} args - Arguments to create many Denuncias.
     * @example
     * // Create many Denuncias
     * const denuncia = await prisma.denuncia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DenunciaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Denuncia.
     * @param {DenunciaDeleteArgs} args - Arguments to delete one Denuncia.
     * @example
     * // Delete one Denuncia
     * const Denuncia = await prisma.denuncia.delete({
     *   where: {
     *     // ... filter to delete one Denuncia
     *   }
     * })
     * 
    **/
    delete<T extends DenunciaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaDeleteArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Denuncia.
     * @param {DenunciaUpdateArgs} args - Arguments to update one Denuncia.
     * @example
     * // Update one Denuncia
     * const denuncia = await prisma.denuncia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DenunciaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaUpdateArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Denuncias.
     * @param {DenunciaDeleteManyArgs} args - Arguments to filter Denuncias to delete.
     * @example
     * // Delete a few Denuncias
     * const { count } = await prisma.denuncia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DenunciaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunciaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Denuncias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Denuncias
     * const denuncia = await prisma.denuncia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DenunciaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Denuncia.
     * @param {DenunciaUpsertArgs} args - Arguments to update or create a Denuncia.
     * @example
     * // Update or create a Denuncia
     * const denuncia = await prisma.denuncia.upsert({
     *   create: {
     *     // ... data to create a Denuncia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Denuncia we want to update
     *   }
     * })
    **/
    upsert<T extends DenunciaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DenunciaUpsertArgs<ExtArgs>>
    ): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Denuncias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaCountArgs} args - Arguments to filter Denuncias to count.
     * @example
     * // Count the number of Denuncias
     * const count = await prisma.denuncia.count({
     *   where: {
     *     // ... the filter for the Denuncias we want to count
     *   }
     * })
    **/
    count<T extends DenunciaCountArgs>(
      args?: Subset<T, DenunciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DenunciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Denuncia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DenunciaAggregateArgs>(args: Subset<T, DenunciaAggregateArgs>): Prisma.PrismaPromise<GetDenunciaAggregateType<T>>

    /**
     * Group by Denuncia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DenunciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DenunciaGroupByArgs['orderBy'] }
        : { orderBy?: DenunciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DenunciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDenunciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Denuncia model
   */
  readonly fields: DenunciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Denuncia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DenunciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    seguimientos<T extends Denuncia$seguimientosArgs<ExtArgs> = {}>(args?: Subset<T, Denuncia$seguimientosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Denuncia model
   */ 
  interface DenunciaFieldRefs {
    readonly iddenuncias: FieldRef<"Denuncia", 'Int'>
    readonly tipo: FieldRef<"Denuncia", 'String'>
    readonly nombre: FieldRef<"Denuncia", 'String'>
    readonly email: FieldRef<"Denuncia", 'String'>
    readonly telefono: FieldRef<"Denuncia", 'String'>
    readonly genero: FieldRef<"Denuncia", 'String'>
    readonly descripcion: FieldRef<"Denuncia", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Denuncia findUnique
   */
  export type DenunciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where: DenunciaWhereUniqueInput
  }

  /**
   * Denuncia findUniqueOrThrow
   */
  export type DenunciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where: DenunciaWhereUniqueInput
  }

  /**
   * Denuncia findFirst
   */
  export type DenunciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Denuncias.
     */
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }

  /**
   * Denuncia findFirstOrThrow
   */
  export type DenunciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncia to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Denuncias.
     */
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }

  /**
   * Denuncia findMany
   */
  export type DenunciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter, which Denuncias to fetch.
     */
    where?: DenunciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denuncias to fetch.
     */
    orderBy?: DenunciaOrderByWithRelationInput | DenunciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Denuncias.
     */
    cursor?: DenunciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denuncias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denuncias.
     */
    skip?: number
    distinct?: DenunciaScalarFieldEnum | DenunciaScalarFieldEnum[]
  }

  /**
   * Denuncia create
   */
  export type DenunciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The data needed to create a Denuncia.
     */
    data: XOR<DenunciaCreateInput, DenunciaUncheckedCreateInput>
  }

  /**
   * Denuncia createMany
   */
  export type DenunciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Denuncias.
     */
    data: DenunciaCreateManyInput | DenunciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Denuncia update
   */
  export type DenunciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The data needed to update a Denuncia.
     */
    data: XOR<DenunciaUpdateInput, DenunciaUncheckedUpdateInput>
    /**
     * Choose, which Denuncia to update.
     */
    where: DenunciaWhereUniqueInput
  }

  /**
   * Denuncia updateMany
   */
  export type DenunciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Denuncias.
     */
    data: XOR<DenunciaUpdateManyMutationInput, DenunciaUncheckedUpdateManyInput>
    /**
     * Filter which Denuncias to update
     */
    where?: DenunciaWhereInput
  }

  /**
   * Denuncia upsert
   */
  export type DenunciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * The filter to search for the Denuncia to update in case it exists.
     */
    where: DenunciaWhereUniqueInput
    /**
     * In case the Denuncia found by the `where` argument doesn't exist, create a new Denuncia with this data.
     */
    create: XOR<DenunciaCreateInput, DenunciaUncheckedCreateInput>
    /**
     * In case the Denuncia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DenunciaUpdateInput, DenunciaUncheckedUpdateInput>
  }

  /**
   * Denuncia delete
   */
  export type DenunciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
    /**
     * Filter which Denuncia to delete.
     */
    where: DenunciaWhereUniqueInput
  }

  /**
   * Denuncia deleteMany
   */
  export type DenunciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Denuncias to delete
     */
    where?: DenunciaWhereInput
  }

  /**
   * Denuncia.seguimientos
   */
  export type Denuncia$seguimientosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    where?: DenunseguimipoliciaWhereInput
    orderBy?: DenunseguimipoliciaOrderByWithRelationInput | DenunseguimipoliciaOrderByWithRelationInput[]
    cursor?: DenunseguimipoliciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DenunseguimipoliciaScalarFieldEnum | DenunseguimipoliciaScalarFieldEnum[]
  }

  /**
   * Denuncia without action
   */
  export type DenunciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denuncia
     */
    select?: DenunciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunciaInclude<ExtArgs> | null
  }


  /**
   * Model Denunseguimipolicia
   */

  export type AggregateDenunseguimipolicia = {
    _count: DenunseguimipoliciaCountAggregateOutputType | null
    _avg: DenunseguimipoliciaAvgAggregateOutputType | null
    _sum: DenunseguimipoliciaSumAggregateOutputType | null
    _min: DenunseguimipoliciaMinAggregateOutputType | null
    _max: DenunseguimipoliciaMaxAggregateOutputType | null
  }

  export type DenunseguimipoliciaAvgAggregateOutputType = {
    id: number | null
    iddenuncia: number | null
  }

  export type DenunseguimipoliciaSumAggregateOutputType = {
    id: number | null
    iddenuncia: number | null
  }

  export type DenunseguimipoliciaMinAggregateOutputType = {
    id: number | null
    iddenuncia: number | null
    descripcion: string | null
    fechaSeguimiento: Date | null
    estado: string | null
  }

  export type DenunseguimipoliciaMaxAggregateOutputType = {
    id: number | null
    iddenuncia: number | null
    descripcion: string | null
    fechaSeguimiento: Date | null
    estado: string | null
  }

  export type DenunseguimipoliciaCountAggregateOutputType = {
    id: number
    iddenuncia: number
    descripcion: number
    fechaSeguimiento: number
    estado: number
    _all: number
  }


  export type DenunseguimipoliciaAvgAggregateInputType = {
    id?: true
    iddenuncia?: true
  }

  export type DenunseguimipoliciaSumAggregateInputType = {
    id?: true
    iddenuncia?: true
  }

  export type DenunseguimipoliciaMinAggregateInputType = {
    id?: true
    iddenuncia?: true
    descripcion?: true
    fechaSeguimiento?: true
    estado?: true
  }

  export type DenunseguimipoliciaMaxAggregateInputType = {
    id?: true
    iddenuncia?: true
    descripcion?: true
    fechaSeguimiento?: true
    estado?: true
  }

  export type DenunseguimipoliciaCountAggregateInputType = {
    id?: true
    iddenuncia?: true
    descripcion?: true
    fechaSeguimiento?: true
    estado?: true
    _all?: true
  }

  export type DenunseguimipoliciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Denunseguimipolicia to aggregate.
     */
    where?: DenunseguimipoliciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denunseguimipolicias to fetch.
     */
    orderBy?: DenunseguimipoliciaOrderByWithRelationInput | DenunseguimipoliciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DenunseguimipoliciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denunseguimipolicias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denunseguimipolicias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Denunseguimipolicias
    **/
    _count?: true | DenunseguimipoliciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DenunseguimipoliciaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DenunseguimipoliciaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DenunseguimipoliciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DenunseguimipoliciaMaxAggregateInputType
  }

  export type GetDenunseguimipoliciaAggregateType<T extends DenunseguimipoliciaAggregateArgs> = {
        [P in keyof T & keyof AggregateDenunseguimipolicia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDenunseguimipolicia[P]>
      : GetScalarType<T[P], AggregateDenunseguimipolicia[P]>
  }




  export type DenunseguimipoliciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DenunseguimipoliciaWhereInput
    orderBy?: DenunseguimipoliciaOrderByWithAggregationInput | DenunseguimipoliciaOrderByWithAggregationInput[]
    by: DenunseguimipoliciaScalarFieldEnum[] | DenunseguimipoliciaScalarFieldEnum
    having?: DenunseguimipoliciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DenunseguimipoliciaCountAggregateInputType | true
    _avg?: DenunseguimipoliciaAvgAggregateInputType
    _sum?: DenunseguimipoliciaSumAggregateInputType
    _min?: DenunseguimipoliciaMinAggregateInputType
    _max?: DenunseguimipoliciaMaxAggregateInputType
  }

  export type DenunseguimipoliciaGroupByOutputType = {
    id: number
    iddenuncia: number
    descripcion: string
    fechaSeguimiento: Date
    estado: string
    _count: DenunseguimipoliciaCountAggregateOutputType | null
    _avg: DenunseguimipoliciaAvgAggregateOutputType | null
    _sum: DenunseguimipoliciaSumAggregateOutputType | null
    _min: DenunseguimipoliciaMinAggregateOutputType | null
    _max: DenunseguimipoliciaMaxAggregateOutputType | null
  }

  type GetDenunseguimipoliciaGroupByPayload<T extends DenunseguimipoliciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DenunseguimipoliciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DenunseguimipoliciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DenunseguimipoliciaGroupByOutputType[P]>
            : GetScalarType<T[P], DenunseguimipoliciaGroupByOutputType[P]>
        }
      >
    >


  export type DenunseguimipoliciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    iddenuncia?: boolean
    descripcion?: boolean
    fechaSeguimiento?: boolean
    estado?: boolean
    Denuncia?: boolean | DenunciaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["denunseguimipolicia"]>

  export type DenunseguimipoliciaSelectScalar = {
    id?: boolean
    iddenuncia?: boolean
    descripcion?: boolean
    fechaSeguimiento?: boolean
    estado?: boolean
  }


  export type DenunseguimipoliciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Denuncia?: boolean | DenunciaDefaultArgs<ExtArgs>
  }


  export type $DenunseguimipoliciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Denunseguimipolicia"
    objects: {
      Denuncia: Prisma.$DenunciaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      iddenuncia: number
      descripcion: string
      fechaSeguimiento: Date
      estado: string
    }, ExtArgs["result"]["denunseguimipolicia"]>
    composites: {}
  }


  type DenunseguimipoliciaGetPayload<S extends boolean | null | undefined | DenunseguimipoliciaDefaultArgs> = $Result.GetResult<Prisma.$DenunseguimipoliciaPayload, S>

  type DenunseguimipoliciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DenunseguimipoliciaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DenunseguimipoliciaCountAggregateInputType | true
    }

  export interface DenunseguimipoliciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Denunseguimipolicia'], meta: { name: 'Denunseguimipolicia' } }
    /**
     * Find zero or one Denunseguimipolicia that matches the filter.
     * @param {DenunseguimipoliciaFindUniqueArgs} args - Arguments to find a Denunseguimipolicia
     * @example
     * // Get one Denunseguimipolicia
     * const denunseguimipolicia = await prisma.denunseguimipolicia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DenunseguimipoliciaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DenunseguimipoliciaFindUniqueArgs<ExtArgs>>
    ): Prisma__DenunseguimipoliciaClient<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Denunseguimipolicia that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DenunseguimipoliciaFindUniqueOrThrowArgs} args - Arguments to find a Denunseguimipolicia
     * @example
     * // Get one Denunseguimipolicia
     * const denunseguimipolicia = await prisma.denunseguimipolicia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DenunseguimipoliciaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunseguimipoliciaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DenunseguimipoliciaClient<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Denunseguimipolicia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunseguimipoliciaFindFirstArgs} args - Arguments to find a Denunseguimipolicia
     * @example
     * // Get one Denunseguimipolicia
     * const denunseguimipolicia = await prisma.denunseguimipolicia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DenunseguimipoliciaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunseguimipoliciaFindFirstArgs<ExtArgs>>
    ): Prisma__DenunseguimipoliciaClient<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Denunseguimipolicia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunseguimipoliciaFindFirstOrThrowArgs} args - Arguments to find a Denunseguimipolicia
     * @example
     * // Get one Denunseguimipolicia
     * const denunseguimipolicia = await prisma.denunseguimipolicia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DenunseguimipoliciaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunseguimipoliciaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DenunseguimipoliciaClient<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Denunseguimipolicias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunseguimipoliciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Denunseguimipolicias
     * const denunseguimipolicias = await prisma.denunseguimipolicia.findMany()
     * 
     * // Get first 10 Denunseguimipolicias
     * const denunseguimipolicias = await prisma.denunseguimipolicia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const denunseguimipoliciaWithIdOnly = await prisma.denunseguimipolicia.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DenunseguimipoliciaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunseguimipoliciaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Denunseguimipolicia.
     * @param {DenunseguimipoliciaCreateArgs} args - Arguments to create a Denunseguimipolicia.
     * @example
     * // Create one Denunseguimipolicia
     * const Denunseguimipolicia = await prisma.denunseguimipolicia.create({
     *   data: {
     *     // ... data to create a Denunseguimipolicia
     *   }
     * })
     * 
    **/
    create<T extends DenunseguimipoliciaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DenunseguimipoliciaCreateArgs<ExtArgs>>
    ): Prisma__DenunseguimipoliciaClient<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Denunseguimipolicias.
     * @param {DenunseguimipoliciaCreateManyArgs} args - Arguments to create many Denunseguimipolicias.
     * @example
     * // Create many Denunseguimipolicias
     * const denunseguimipolicia = await prisma.denunseguimipolicia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends DenunseguimipoliciaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunseguimipoliciaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Denunseguimipolicia.
     * @param {DenunseguimipoliciaDeleteArgs} args - Arguments to delete one Denunseguimipolicia.
     * @example
     * // Delete one Denunseguimipolicia
     * const Denunseguimipolicia = await prisma.denunseguimipolicia.delete({
     *   where: {
     *     // ... filter to delete one Denunseguimipolicia
     *   }
     * })
     * 
    **/
    delete<T extends DenunseguimipoliciaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DenunseguimipoliciaDeleteArgs<ExtArgs>>
    ): Prisma__DenunseguimipoliciaClient<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Denunseguimipolicia.
     * @param {DenunseguimipoliciaUpdateArgs} args - Arguments to update one Denunseguimipolicia.
     * @example
     * // Update one Denunseguimipolicia
     * const denunseguimipolicia = await prisma.denunseguimipolicia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DenunseguimipoliciaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DenunseguimipoliciaUpdateArgs<ExtArgs>>
    ): Prisma__DenunseguimipoliciaClient<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Denunseguimipolicias.
     * @param {DenunseguimipoliciaDeleteManyArgs} args - Arguments to filter Denunseguimipolicias to delete.
     * @example
     * // Delete a few Denunseguimipolicias
     * const { count } = await prisma.denunseguimipolicia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DenunseguimipoliciaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DenunseguimipoliciaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Denunseguimipolicias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunseguimipoliciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Denunseguimipolicias
     * const denunseguimipolicia = await prisma.denunseguimipolicia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DenunseguimipoliciaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DenunseguimipoliciaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Denunseguimipolicia.
     * @param {DenunseguimipoliciaUpsertArgs} args - Arguments to update or create a Denunseguimipolicia.
     * @example
     * // Update or create a Denunseguimipolicia
     * const denunseguimipolicia = await prisma.denunseguimipolicia.upsert({
     *   create: {
     *     // ... data to create a Denunseguimipolicia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Denunseguimipolicia we want to update
     *   }
     * })
    **/
    upsert<T extends DenunseguimipoliciaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DenunseguimipoliciaUpsertArgs<ExtArgs>>
    ): Prisma__DenunseguimipoliciaClient<$Result.GetResult<Prisma.$DenunseguimipoliciaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Denunseguimipolicias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunseguimipoliciaCountArgs} args - Arguments to filter Denunseguimipolicias to count.
     * @example
     * // Count the number of Denunseguimipolicias
     * const count = await prisma.denunseguimipolicia.count({
     *   where: {
     *     // ... the filter for the Denunseguimipolicias we want to count
     *   }
     * })
    **/
    count<T extends DenunseguimipoliciaCountArgs>(
      args?: Subset<T, DenunseguimipoliciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DenunseguimipoliciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Denunseguimipolicia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunseguimipoliciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DenunseguimipoliciaAggregateArgs>(args: Subset<T, DenunseguimipoliciaAggregateArgs>): Prisma.PrismaPromise<GetDenunseguimipoliciaAggregateType<T>>

    /**
     * Group by Denunseguimipolicia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DenunseguimipoliciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DenunseguimipoliciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DenunseguimipoliciaGroupByArgs['orderBy'] }
        : { orderBy?: DenunseguimipoliciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DenunseguimipoliciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDenunseguimipoliciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Denunseguimipolicia model
   */
  readonly fields: DenunseguimipoliciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Denunseguimipolicia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DenunseguimipoliciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    Denuncia<T extends DenunciaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DenunciaDefaultArgs<ExtArgs>>): Prisma__DenunciaClient<$Result.GetResult<Prisma.$DenunciaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Denunseguimipolicia model
   */ 
  interface DenunseguimipoliciaFieldRefs {
    readonly id: FieldRef<"Denunseguimipolicia", 'Int'>
    readonly iddenuncia: FieldRef<"Denunseguimipolicia", 'Int'>
    readonly descripcion: FieldRef<"Denunseguimipolicia", 'String'>
    readonly fechaSeguimiento: FieldRef<"Denunseguimipolicia", 'DateTime'>
    readonly estado: FieldRef<"Denunseguimipolicia", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Denunseguimipolicia findUnique
   */
  export type DenunseguimipoliciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * Filter, which Denunseguimipolicia to fetch.
     */
    where: DenunseguimipoliciaWhereUniqueInput
  }

  /**
   * Denunseguimipolicia findUniqueOrThrow
   */
  export type DenunseguimipoliciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * Filter, which Denunseguimipolicia to fetch.
     */
    where: DenunseguimipoliciaWhereUniqueInput
  }

  /**
   * Denunseguimipolicia findFirst
   */
  export type DenunseguimipoliciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * Filter, which Denunseguimipolicia to fetch.
     */
    where?: DenunseguimipoliciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denunseguimipolicias to fetch.
     */
    orderBy?: DenunseguimipoliciaOrderByWithRelationInput | DenunseguimipoliciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Denunseguimipolicias.
     */
    cursor?: DenunseguimipoliciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denunseguimipolicias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denunseguimipolicias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Denunseguimipolicias.
     */
    distinct?: DenunseguimipoliciaScalarFieldEnum | DenunseguimipoliciaScalarFieldEnum[]
  }

  /**
   * Denunseguimipolicia findFirstOrThrow
   */
  export type DenunseguimipoliciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * Filter, which Denunseguimipolicia to fetch.
     */
    where?: DenunseguimipoliciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denunseguimipolicias to fetch.
     */
    orderBy?: DenunseguimipoliciaOrderByWithRelationInput | DenunseguimipoliciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Denunseguimipolicias.
     */
    cursor?: DenunseguimipoliciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denunseguimipolicias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denunseguimipolicias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Denunseguimipolicias.
     */
    distinct?: DenunseguimipoliciaScalarFieldEnum | DenunseguimipoliciaScalarFieldEnum[]
  }

  /**
   * Denunseguimipolicia findMany
   */
  export type DenunseguimipoliciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * Filter, which Denunseguimipolicias to fetch.
     */
    where?: DenunseguimipoliciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Denunseguimipolicias to fetch.
     */
    orderBy?: DenunseguimipoliciaOrderByWithRelationInput | DenunseguimipoliciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Denunseguimipolicias.
     */
    cursor?: DenunseguimipoliciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Denunseguimipolicias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Denunseguimipolicias.
     */
    skip?: number
    distinct?: DenunseguimipoliciaScalarFieldEnum | DenunseguimipoliciaScalarFieldEnum[]
  }

  /**
   * Denunseguimipolicia create
   */
  export type DenunseguimipoliciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * The data needed to create a Denunseguimipolicia.
     */
    data: XOR<DenunseguimipoliciaCreateInput, DenunseguimipoliciaUncheckedCreateInput>
  }

  /**
   * Denunseguimipolicia createMany
   */
  export type DenunseguimipoliciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Denunseguimipolicias.
     */
    data: DenunseguimipoliciaCreateManyInput | DenunseguimipoliciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Denunseguimipolicia update
   */
  export type DenunseguimipoliciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * The data needed to update a Denunseguimipolicia.
     */
    data: XOR<DenunseguimipoliciaUpdateInput, DenunseguimipoliciaUncheckedUpdateInput>
    /**
     * Choose, which Denunseguimipolicia to update.
     */
    where: DenunseguimipoliciaWhereUniqueInput
  }

  /**
   * Denunseguimipolicia updateMany
   */
  export type DenunseguimipoliciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Denunseguimipolicias.
     */
    data: XOR<DenunseguimipoliciaUpdateManyMutationInput, DenunseguimipoliciaUncheckedUpdateManyInput>
    /**
     * Filter which Denunseguimipolicias to update
     */
    where?: DenunseguimipoliciaWhereInput
  }

  /**
   * Denunseguimipolicia upsert
   */
  export type DenunseguimipoliciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * The filter to search for the Denunseguimipolicia to update in case it exists.
     */
    where: DenunseguimipoliciaWhereUniqueInput
    /**
     * In case the Denunseguimipolicia found by the `where` argument doesn't exist, create a new Denunseguimipolicia with this data.
     */
    create: XOR<DenunseguimipoliciaCreateInput, DenunseguimipoliciaUncheckedCreateInput>
    /**
     * In case the Denunseguimipolicia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DenunseguimipoliciaUpdateInput, DenunseguimipoliciaUncheckedUpdateInput>
  }

  /**
   * Denunseguimipolicia delete
   */
  export type DenunseguimipoliciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
    /**
     * Filter which Denunseguimipolicia to delete.
     */
    where: DenunseguimipoliciaWhereUniqueInput
  }

  /**
   * Denunseguimipolicia deleteMany
   */
  export type DenunseguimipoliciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Denunseguimipolicias to delete
     */
    where?: DenunseguimipoliciaWhereInput
  }

  /**
   * Denunseguimipolicia without action
   */
  export type DenunseguimipoliciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Denunseguimipolicia
     */
    select?: DenunseguimipoliciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DenunseguimipoliciaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const DenunciaScalarFieldEnum: {
    iddenuncias: 'iddenuncias',
    tipo: 'tipo',
    nombre: 'nombre',
    email: 'email',
    telefono: 'telefono',
    genero: 'genero',
    descripcion: 'descripcion'
  };

  export type DenunciaScalarFieldEnum = (typeof DenunciaScalarFieldEnum)[keyof typeof DenunciaScalarFieldEnum]


  export const DenunseguimipoliciaScalarFieldEnum: {
    id: 'id',
    iddenuncia: 'iddenuncia',
    descripcion: 'descripcion',
    fechaSeguimiento: 'fechaSeguimiento',
    estado: 'estado'
  };

  export type DenunseguimipoliciaScalarFieldEnum = (typeof DenunseguimipoliciaScalarFieldEnum)[keyof typeof DenunseguimipoliciaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type DenunciaWhereInput = {
    AND?: DenunciaWhereInput | DenunciaWhereInput[]
    OR?: DenunciaWhereInput[]
    NOT?: DenunciaWhereInput | DenunciaWhereInput[]
    iddenuncias?: IntFilter<"Denuncia"> | number
    tipo?: StringFilter<"Denuncia"> | string
    nombre?: StringFilter<"Denuncia"> | string
    email?: StringFilter<"Denuncia"> | string
    telefono?: StringFilter<"Denuncia"> | string
    genero?: StringFilter<"Denuncia"> | string
    descripcion?: StringFilter<"Denuncia"> | string
    seguimientos?: DenunseguimipoliciaListRelationFilter
  }

  export type DenunciaOrderByWithRelationInput = {
    iddenuncias?: SortOrder
    tipo?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    genero?: SortOrder
    descripcion?: SortOrder
    seguimientos?: DenunseguimipoliciaOrderByRelationAggregateInput
  }

  export type DenunciaWhereUniqueInput = Prisma.AtLeast<{
    iddenuncias?: number
    AND?: DenunciaWhereInput | DenunciaWhereInput[]
    OR?: DenunciaWhereInput[]
    NOT?: DenunciaWhereInput | DenunciaWhereInput[]
    tipo?: StringFilter<"Denuncia"> | string
    nombre?: StringFilter<"Denuncia"> | string
    email?: StringFilter<"Denuncia"> | string
    telefono?: StringFilter<"Denuncia"> | string
    genero?: StringFilter<"Denuncia"> | string
    descripcion?: StringFilter<"Denuncia"> | string
    seguimientos?: DenunseguimipoliciaListRelationFilter
  }, "iddenuncias">

  export type DenunciaOrderByWithAggregationInput = {
    iddenuncias?: SortOrder
    tipo?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    genero?: SortOrder
    descripcion?: SortOrder
    _count?: DenunciaCountOrderByAggregateInput
    _avg?: DenunciaAvgOrderByAggregateInput
    _max?: DenunciaMaxOrderByAggregateInput
    _min?: DenunciaMinOrderByAggregateInput
    _sum?: DenunciaSumOrderByAggregateInput
  }

  export type DenunciaScalarWhereWithAggregatesInput = {
    AND?: DenunciaScalarWhereWithAggregatesInput | DenunciaScalarWhereWithAggregatesInput[]
    OR?: DenunciaScalarWhereWithAggregatesInput[]
    NOT?: DenunciaScalarWhereWithAggregatesInput | DenunciaScalarWhereWithAggregatesInput[]
    iddenuncias?: IntWithAggregatesFilter<"Denuncia"> | number
    tipo?: StringWithAggregatesFilter<"Denuncia"> | string
    nombre?: StringWithAggregatesFilter<"Denuncia"> | string
    email?: StringWithAggregatesFilter<"Denuncia"> | string
    telefono?: StringWithAggregatesFilter<"Denuncia"> | string
    genero?: StringWithAggregatesFilter<"Denuncia"> | string
    descripcion?: StringWithAggregatesFilter<"Denuncia"> | string
  }

  export type DenunseguimipoliciaWhereInput = {
    AND?: DenunseguimipoliciaWhereInput | DenunseguimipoliciaWhereInput[]
    OR?: DenunseguimipoliciaWhereInput[]
    NOT?: DenunseguimipoliciaWhereInput | DenunseguimipoliciaWhereInput[]
    id?: IntFilter<"Denunseguimipolicia"> | number
    iddenuncia?: IntFilter<"Denunseguimipolicia"> | number
    descripcion?: StringFilter<"Denunseguimipolicia"> | string
    fechaSeguimiento?: DateTimeFilter<"Denunseguimipolicia"> | Date | string
    estado?: StringFilter<"Denunseguimipolicia"> | string
    Denuncia?: XOR<DenunciaRelationFilter, DenunciaWhereInput>
  }

  export type DenunseguimipoliciaOrderByWithRelationInput = {
    id?: SortOrder
    iddenuncia?: SortOrder
    descripcion?: SortOrder
    fechaSeguimiento?: SortOrder
    estado?: SortOrder
    Denuncia?: DenunciaOrderByWithRelationInput
  }

  export type DenunseguimipoliciaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DenunseguimipoliciaWhereInput | DenunseguimipoliciaWhereInput[]
    OR?: DenunseguimipoliciaWhereInput[]
    NOT?: DenunseguimipoliciaWhereInput | DenunseguimipoliciaWhereInput[]
    iddenuncia?: IntFilter<"Denunseguimipolicia"> | number
    descripcion?: StringFilter<"Denunseguimipolicia"> | string
    fechaSeguimiento?: DateTimeFilter<"Denunseguimipolicia"> | Date | string
    estado?: StringFilter<"Denunseguimipolicia"> | string
    Denuncia?: XOR<DenunciaRelationFilter, DenunciaWhereInput>
  }, "id">

  export type DenunseguimipoliciaOrderByWithAggregationInput = {
    id?: SortOrder
    iddenuncia?: SortOrder
    descripcion?: SortOrder
    fechaSeguimiento?: SortOrder
    estado?: SortOrder
    _count?: DenunseguimipoliciaCountOrderByAggregateInput
    _avg?: DenunseguimipoliciaAvgOrderByAggregateInput
    _max?: DenunseguimipoliciaMaxOrderByAggregateInput
    _min?: DenunseguimipoliciaMinOrderByAggregateInput
    _sum?: DenunseguimipoliciaSumOrderByAggregateInput
  }

  export type DenunseguimipoliciaScalarWhereWithAggregatesInput = {
    AND?: DenunseguimipoliciaScalarWhereWithAggregatesInput | DenunseguimipoliciaScalarWhereWithAggregatesInput[]
    OR?: DenunseguimipoliciaScalarWhereWithAggregatesInput[]
    NOT?: DenunseguimipoliciaScalarWhereWithAggregatesInput | DenunseguimipoliciaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Denunseguimipolicia"> | number
    iddenuncia?: IntWithAggregatesFilter<"Denunseguimipolicia"> | number
    descripcion?: StringWithAggregatesFilter<"Denunseguimipolicia"> | string
    fechaSeguimiento?: DateTimeWithAggregatesFilter<"Denunseguimipolicia"> | Date | string
    estado?: StringWithAggregatesFilter<"Denunseguimipolicia"> | string
  }

  export type DenunciaCreateInput = {
    tipo: string
    nombre: string
    email: string
    telefono: string
    genero: string
    descripcion: string
    seguimientos?: DenunseguimipoliciaCreateNestedManyWithoutDenunciaInput
  }

  export type DenunciaUncheckedCreateInput = {
    iddenuncias?: number
    tipo: string
    nombre: string
    email: string
    telefono: string
    genero: string
    descripcion: string
    seguimientos?: DenunseguimipoliciaUncheckedCreateNestedManyWithoutDenunciaInput
  }

  export type DenunciaUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    seguimientos?: DenunseguimipoliciaUpdateManyWithoutDenunciaNestedInput
  }

  export type DenunciaUncheckedUpdateInput = {
    iddenuncias?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    seguimientos?: DenunseguimipoliciaUncheckedUpdateManyWithoutDenunciaNestedInput
  }

  export type DenunciaCreateManyInput = {
    iddenuncias?: number
    tipo: string
    nombre: string
    email: string
    telefono: string
    genero: string
    descripcion: string
  }

  export type DenunciaUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type DenunciaUncheckedUpdateManyInput = {
    iddenuncias?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type DenunseguimipoliciaCreateInput = {
    descripcion: string
    fechaSeguimiento?: Date | string
    estado: string
    Denuncia: DenunciaCreateNestedOneWithoutSeguimientosInput
  }

  export type DenunseguimipoliciaUncheckedCreateInput = {
    id?: number
    iddenuncia: number
    descripcion: string
    fechaSeguimiento?: Date | string
    estado: string
  }

  export type DenunseguimipoliciaUpdateInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaSeguimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    Denuncia?: DenunciaUpdateOneRequiredWithoutSeguimientosNestedInput
  }

  export type DenunseguimipoliciaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    iddenuncia?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaSeguimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type DenunseguimipoliciaCreateManyInput = {
    id?: number
    iddenuncia: number
    descripcion: string
    fechaSeguimiento?: Date | string
    estado: string
  }

  export type DenunseguimipoliciaUpdateManyMutationInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaSeguimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type DenunseguimipoliciaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    iddenuncia?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaSeguimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DenunseguimipoliciaListRelationFilter = {
    every?: DenunseguimipoliciaWhereInput
    some?: DenunseguimipoliciaWhereInput
    none?: DenunseguimipoliciaWhereInput
  }

  export type DenunseguimipoliciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DenunciaCountOrderByAggregateInput = {
    iddenuncias?: SortOrder
    tipo?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    genero?: SortOrder
    descripcion?: SortOrder
  }

  export type DenunciaAvgOrderByAggregateInput = {
    iddenuncias?: SortOrder
  }

  export type DenunciaMaxOrderByAggregateInput = {
    iddenuncias?: SortOrder
    tipo?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    genero?: SortOrder
    descripcion?: SortOrder
  }

  export type DenunciaMinOrderByAggregateInput = {
    iddenuncias?: SortOrder
    tipo?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    genero?: SortOrder
    descripcion?: SortOrder
  }

  export type DenunciaSumOrderByAggregateInput = {
    iddenuncias?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DenunciaRelationFilter = {
    is?: DenunciaWhereInput
    isNot?: DenunciaWhereInput
  }

  export type DenunseguimipoliciaCountOrderByAggregateInput = {
    id?: SortOrder
    iddenuncia?: SortOrder
    descripcion?: SortOrder
    fechaSeguimiento?: SortOrder
    estado?: SortOrder
  }

  export type DenunseguimipoliciaAvgOrderByAggregateInput = {
    id?: SortOrder
    iddenuncia?: SortOrder
  }

  export type DenunseguimipoliciaMaxOrderByAggregateInput = {
    id?: SortOrder
    iddenuncia?: SortOrder
    descripcion?: SortOrder
    fechaSeguimiento?: SortOrder
    estado?: SortOrder
  }

  export type DenunseguimipoliciaMinOrderByAggregateInput = {
    id?: SortOrder
    iddenuncia?: SortOrder
    descripcion?: SortOrder
    fechaSeguimiento?: SortOrder
    estado?: SortOrder
  }

  export type DenunseguimipoliciaSumOrderByAggregateInput = {
    id?: SortOrder
    iddenuncia?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DenunseguimipoliciaCreateNestedManyWithoutDenunciaInput = {
    create?: XOR<DenunseguimipoliciaCreateWithoutDenunciaInput, DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput> | DenunseguimipoliciaCreateWithoutDenunciaInput[] | DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput[]
    connectOrCreate?: DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput | DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput[]
    createMany?: DenunseguimipoliciaCreateManyDenunciaInputEnvelope
    connect?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
  }

  export type DenunseguimipoliciaUncheckedCreateNestedManyWithoutDenunciaInput = {
    create?: XOR<DenunseguimipoliciaCreateWithoutDenunciaInput, DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput> | DenunseguimipoliciaCreateWithoutDenunciaInput[] | DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput[]
    connectOrCreate?: DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput | DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput[]
    createMany?: DenunseguimipoliciaCreateManyDenunciaInputEnvelope
    connect?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DenunseguimipoliciaUpdateManyWithoutDenunciaNestedInput = {
    create?: XOR<DenunseguimipoliciaCreateWithoutDenunciaInput, DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput> | DenunseguimipoliciaCreateWithoutDenunciaInput[] | DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput[]
    connectOrCreate?: DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput | DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput[]
    upsert?: DenunseguimipoliciaUpsertWithWhereUniqueWithoutDenunciaInput | DenunseguimipoliciaUpsertWithWhereUniqueWithoutDenunciaInput[]
    createMany?: DenunseguimipoliciaCreateManyDenunciaInputEnvelope
    set?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
    disconnect?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
    delete?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
    connect?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
    update?: DenunseguimipoliciaUpdateWithWhereUniqueWithoutDenunciaInput | DenunseguimipoliciaUpdateWithWhereUniqueWithoutDenunciaInput[]
    updateMany?: DenunseguimipoliciaUpdateManyWithWhereWithoutDenunciaInput | DenunseguimipoliciaUpdateManyWithWhereWithoutDenunciaInput[]
    deleteMany?: DenunseguimipoliciaScalarWhereInput | DenunseguimipoliciaScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DenunseguimipoliciaUncheckedUpdateManyWithoutDenunciaNestedInput = {
    create?: XOR<DenunseguimipoliciaCreateWithoutDenunciaInput, DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput> | DenunseguimipoliciaCreateWithoutDenunciaInput[] | DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput[]
    connectOrCreate?: DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput | DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput[]
    upsert?: DenunseguimipoliciaUpsertWithWhereUniqueWithoutDenunciaInput | DenunseguimipoliciaUpsertWithWhereUniqueWithoutDenunciaInput[]
    createMany?: DenunseguimipoliciaCreateManyDenunciaInputEnvelope
    set?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
    disconnect?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
    delete?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
    connect?: DenunseguimipoliciaWhereUniqueInput | DenunseguimipoliciaWhereUniqueInput[]
    update?: DenunseguimipoliciaUpdateWithWhereUniqueWithoutDenunciaInput | DenunseguimipoliciaUpdateWithWhereUniqueWithoutDenunciaInput[]
    updateMany?: DenunseguimipoliciaUpdateManyWithWhereWithoutDenunciaInput | DenunseguimipoliciaUpdateManyWithWhereWithoutDenunciaInput[]
    deleteMany?: DenunseguimipoliciaScalarWhereInput | DenunseguimipoliciaScalarWhereInput[]
  }

  export type DenunciaCreateNestedOneWithoutSeguimientosInput = {
    create?: XOR<DenunciaCreateWithoutSeguimientosInput, DenunciaUncheckedCreateWithoutSeguimientosInput>
    connectOrCreate?: DenunciaCreateOrConnectWithoutSeguimientosInput
    connect?: DenunciaWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type DenunciaUpdateOneRequiredWithoutSeguimientosNestedInput = {
    create?: XOR<DenunciaCreateWithoutSeguimientosInput, DenunciaUncheckedCreateWithoutSeguimientosInput>
    connectOrCreate?: DenunciaCreateOrConnectWithoutSeguimientosInput
    upsert?: DenunciaUpsertWithoutSeguimientosInput
    connect?: DenunciaWhereUniqueInput
    update?: XOR<XOR<DenunciaUpdateToOneWithWhereWithoutSeguimientosInput, DenunciaUpdateWithoutSeguimientosInput>, DenunciaUncheckedUpdateWithoutSeguimientosInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DenunseguimipoliciaCreateWithoutDenunciaInput = {
    descripcion: string
    fechaSeguimiento?: Date | string
    estado: string
  }

  export type DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput = {
    id?: number
    descripcion: string
    fechaSeguimiento?: Date | string
    estado: string
  }

  export type DenunseguimipoliciaCreateOrConnectWithoutDenunciaInput = {
    where: DenunseguimipoliciaWhereUniqueInput
    create: XOR<DenunseguimipoliciaCreateWithoutDenunciaInput, DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput>
  }

  export type DenunseguimipoliciaCreateManyDenunciaInputEnvelope = {
    data: DenunseguimipoliciaCreateManyDenunciaInput | DenunseguimipoliciaCreateManyDenunciaInput[]
    skipDuplicates?: boolean
  }

  export type DenunseguimipoliciaUpsertWithWhereUniqueWithoutDenunciaInput = {
    where: DenunseguimipoliciaWhereUniqueInput
    update: XOR<DenunseguimipoliciaUpdateWithoutDenunciaInput, DenunseguimipoliciaUncheckedUpdateWithoutDenunciaInput>
    create: XOR<DenunseguimipoliciaCreateWithoutDenunciaInput, DenunseguimipoliciaUncheckedCreateWithoutDenunciaInput>
  }

  export type DenunseguimipoliciaUpdateWithWhereUniqueWithoutDenunciaInput = {
    where: DenunseguimipoliciaWhereUniqueInput
    data: XOR<DenunseguimipoliciaUpdateWithoutDenunciaInput, DenunseguimipoliciaUncheckedUpdateWithoutDenunciaInput>
  }

  export type DenunseguimipoliciaUpdateManyWithWhereWithoutDenunciaInput = {
    where: DenunseguimipoliciaScalarWhereInput
    data: XOR<DenunseguimipoliciaUpdateManyMutationInput, DenunseguimipoliciaUncheckedUpdateManyWithoutDenunciaInput>
  }

  export type DenunseguimipoliciaScalarWhereInput = {
    AND?: DenunseguimipoliciaScalarWhereInput | DenunseguimipoliciaScalarWhereInput[]
    OR?: DenunseguimipoliciaScalarWhereInput[]
    NOT?: DenunseguimipoliciaScalarWhereInput | DenunseguimipoliciaScalarWhereInput[]
    id?: IntFilter<"Denunseguimipolicia"> | number
    iddenuncia?: IntFilter<"Denunseguimipolicia"> | number
    descripcion?: StringFilter<"Denunseguimipolicia"> | string
    fechaSeguimiento?: DateTimeFilter<"Denunseguimipolicia"> | Date | string
    estado?: StringFilter<"Denunseguimipolicia"> | string
  }

  export type DenunciaCreateWithoutSeguimientosInput = {
    tipo: string
    nombre: string
    email: string
    telefono: string
    genero: string
    descripcion: string
  }

  export type DenunciaUncheckedCreateWithoutSeguimientosInput = {
    iddenuncias?: number
    tipo: string
    nombre: string
    email: string
    telefono: string
    genero: string
    descripcion: string
  }

  export type DenunciaCreateOrConnectWithoutSeguimientosInput = {
    where: DenunciaWhereUniqueInput
    create: XOR<DenunciaCreateWithoutSeguimientosInput, DenunciaUncheckedCreateWithoutSeguimientosInput>
  }

  export type DenunciaUpsertWithoutSeguimientosInput = {
    update: XOR<DenunciaUpdateWithoutSeguimientosInput, DenunciaUncheckedUpdateWithoutSeguimientosInput>
    create: XOR<DenunciaCreateWithoutSeguimientosInput, DenunciaUncheckedCreateWithoutSeguimientosInput>
    where?: DenunciaWhereInput
  }

  export type DenunciaUpdateToOneWithWhereWithoutSeguimientosInput = {
    where?: DenunciaWhereInput
    data: XOR<DenunciaUpdateWithoutSeguimientosInput, DenunciaUncheckedUpdateWithoutSeguimientosInput>
  }

  export type DenunciaUpdateWithoutSeguimientosInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type DenunciaUncheckedUpdateWithoutSeguimientosInput = {
    iddenuncias?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    genero?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
  }

  export type DenunseguimipoliciaCreateManyDenunciaInput = {
    id?: number
    descripcion: string
    fechaSeguimiento?: Date | string
    estado: string
  }

  export type DenunseguimipoliciaUpdateWithoutDenunciaInput = {
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaSeguimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type DenunseguimipoliciaUncheckedUpdateWithoutDenunciaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaSeguimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
  }

  export type DenunseguimipoliciaUncheckedUpdateManyWithoutDenunciaInput = {
    id?: IntFieldUpdateOperationsInput | number
    descripcion?: StringFieldUpdateOperationsInput | string
    fechaSeguimiento?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use DenunciaCountOutputTypeDefaultArgs instead
     */
    export type DenunciaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DenunciaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DenunciaDefaultArgs instead
     */
    export type DenunciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DenunciaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DenunseguimipoliciaDefaultArgs instead
     */
    export type DenunseguimipoliciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DenunseguimipoliciaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}